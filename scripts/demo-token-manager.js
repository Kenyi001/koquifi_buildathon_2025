const { ethers } = require("hardhat");

async function main() {
    console.log("üî• DEMO: SISTEMA DE QUEMA Y MINT AUTOM√ÅTICO");
    console.log("===========================================");
    
    const [deployer] = await ethers.getSigners();
    
    // Direcciones de contratos
    const KOQUI_COIN_ADDRESS = "0xb45AC6f0cF521ff307E7a273cC05973EFbbcdcdf";
    const TOKEN_MANAGER_ADDRESS = "0x025c37599B5b154892eA3525d24c8CF1e8e98c55";
    
    // Conectar a contratos
    const koquiCoin = await ethers.getContractAt("KoquiCoin", KOQUI_COIN_ADDRESS);
    const tokenManager = await ethers.getContractAt("KoquiTokenManager", TOKEN_MANAGER_ADDRESS);
    
    console.log("üìä ESTADO INICIAL DEL SISTEMA");
    console.log("==============================");
    
    // Obtener estado inicial
    const initialSupply = await koquiCoin.totalSupply();
    const initialPrice = await tokenManager.getCurrentPrice();
    const [shouldIntervene, reason, price] = await tokenManager.shouldInterveneNow();
    const systemStatus = await tokenManager.getSystemStatus();
    
    console.log(`üí∞ Supply inicial: ${ethers.formatEther(initialSupply)} KOQUI`);
    console.log(`üí≤ Precio simulado: $${(Number(initialPrice.price) / 1e8).toFixed(4)}`);
    console.log(`üéØ Precio objetivo: $${(Number(systemStatus[0]) / 1e8).toFixed(2)}`);
    console.log(`‚ö° Tolerancia: ¬±${(Number(systemStatus[2]) / 1e6).toFixed(1)}%`);
    console.log(`üîÑ Puede intervenir: ${shouldIntervene ? '‚úÖ' : '‚ùå'}`);
    console.log(`üìù Raz√≥n: ${reason}`);
    
    console.log("\nüéÆ DEMO DE FUNCIONAMIENTO");
    console.log("==========================");
    
    // Simular escenarios
    console.log("\n1Ô∏è‚É£ ESCENARIO: Precio alto -> Quemar tokens");
    console.log("--------------------------------------------");
    
    try {
        console.log("üî• Intentando forzar quema...");
        const burnTx = await tokenManager.forceIntervention(true); // true = burn
        await burnTx.wait();
        
        // Ver resultado
        const newSupply = await koquiCoin.totalSupply();
        const newPrice = await tokenManager.getCurrentPrice();
        const metrics = await tokenManager.getSupplyMetrics();
        
        console.log(`‚úÖ Quema ejecutada!`);
        console.log(`   ‚îú‚îÄ Supply anterior: ${ethers.formatEther(initialSupply)} KOQUI`);
        console.log(`   ‚îú‚îÄ Supply nuevo: ${ethers.formatEther(newSupply)} KOQUI`);
        console.log(`   ‚îú‚îÄ Tokens quemados: ${ethers.formatEther(initialSupply - newSupply)} KOQUI`);
        console.log(`   ‚îú‚îÄ Precio nuevo: $${(Number(newPrice.price) / 1e8).toFixed(4)}`);
        console.log(`   ‚îî‚îÄ Total quemado hist√≥rico: ${ethers.formatEther(metrics[1])} KOQUI`);
        
    } catch (error) {
        console.log(`‚ùå Error en quema: ${error.message}`);
        if (error.message.includes("Cooldown")) {
            console.log("üí° Esto es normal - hay un cooldown de 5 minutos entre intervenciones");
        }
    }
    
    console.log("\n‚è∞ ESPERANDO COOLDOWN...");
    console.log("=========================");
    
    // Verificar pr√≥xima intervenci√≥n disponible
    const nextIntervention = Number(systemStatus[6]);
    const now = Math.floor(Date.now() / 1000);
    const waitTime = nextIntervention - now;
    
    if (waitTime > 0) {
        console.log(`‚è≥ Pr√≥xima intervenci√≥n disponible en: ${waitTime} segundos`);
        console.log(`‚è∞ Timestamp: ${new Date(nextIntervention * 1000).toLocaleString()}`);
    } else {
        console.log("‚úÖ Intervenci√≥n disponible ahora");
    }
    
    console.log("\n2Ô∏è‚É£ ESCENARIO: Simular diferentes precios");
    console.log("------------------------------------------");
    
    // Mostrar c√≥mo funciona el algoritmo de precios
    const supplies = [
        ethers.parseEther("50000000"),  // 50M - precio alto
        ethers.parseEther("100000000"), // 100M - precio base
        ethers.parseEther("200000000"), // 200M - precio bajo
        ethers.parseEther("500000000")  // 500M - precio muy bajo
    ];
    
    console.log("üìà Simulaci√≥n de precios seg√∫n supply:");
    for (const supply of supplies) {
        const basePrice = 1e8; // $1.00 en formato de 8 decimales
        const initialSupply = 100_000_000; // 100M inicial
        const supplyInEther = Number(ethers.formatEther(supply));
        const simulatedPrice = (basePrice * initialSupply) / supplyInEther;
        console.log(`   ‚îú‚îÄ Supply: ${ethers.formatEther(supply).padStart(10)} KOQUI -> Precio: $${(simulatedPrice / 1e8).toFixed(4)}`);
    }
    
    console.log("\nüìä M√âTRICAS DEL SISTEMA");
    console.log("========================");
    
    const finalMetrics = await tokenManager.getSupplyMetrics();
    const finalSupply = await koquiCoin.totalSupply();
    const finalPrice = await tokenManager.getCurrentPrice();
    
    console.log(`üìä Supply actual: ${ethers.formatEther(finalSupply)} KOQUI`);
    console.log(`üí≤ Precio actual: $${(Number(finalPrice.price) / 1e8).toFixed(4)}`);
    console.log(`üî• Total quemado: ${ethers.formatEther(finalMetrics[1])} KOQUI`);
    console.log(`üí∞ Total minteado: ${ethers.formatEther(finalMetrics[2])} KOQUI`);
    console.log(`üîÑ Intervenciones: ${finalMetrics[3]}`);
    
    console.log("\nüéØ C√ìMO FUNCIONA EL SISTEMA");
    console.log("===========================");
    console.log("üî∏ Cuando el precio SUBE por encima de $1.05:");
    console.log("   ‚îú‚îÄ Se QUEMAN tokens autom√°ticamente");
    console.log("   ‚îú‚îÄ Reduce el supply -> Aumenta escasez");
    console.log("   ‚îî‚îÄ Tiende a estabilizar el precio");
    console.log("");
    console.log("üî∏ Cuando el precio BAJA por debajo de $0.95:");
    console.log("   ‚îú‚îÄ Se MINTEAN nuevos tokens");
    console.log("   ‚îú‚îÄ Aumenta el supply -> Reduce escasez");
    console.log("   ‚îî‚îÄ Tiende a estabilizar el precio");
    console.log("");
    console.log("üî∏ Protecciones incluidas:");
    console.log("   ‚îú‚îÄ Supply m√≠nimo: 50M tokens");
    console.log("   ‚îú‚îÄ Supply m√°ximo: 500M tokens");
    console.log("   ‚îú‚îÄ Cooldown: 5 minutos entre intervenciones");
    console.log("   ‚îî‚îÄ Tasas limitadas: max 3% quema, max 1% mint");
    
    console.log("\nüöÄ INTEGRACI√ìN CON BUILDATHON");
    console.log("==============================");
    console.log("‚úÖ Sistema de tokenomics avanzado implementado");
    console.log("‚úÖ Estabilizaci√≥n autom√°tica de precios");
    console.log("‚úÖ Protecci√≥n contra volatilidad extrema");
    console.log("‚úÖ M√©tricas en tiempo real disponibles");
    console.log("‚úÖ Lista para integrar con price feeds reales");
    
    console.log("\nüîó ENLACES DEL SISTEMA");
    console.log("======================");
    console.log(`ü™ô KoquiCoin: https://testnet.snowtrace.io/address/${KOQUI_COIN_ADDRESS}`);
    console.log(`üîß TokenManager: https://testnet.snowtrace.io/address/${TOKEN_MANAGER_ADDRESS}`);
    
    console.log("\nüí° PR√ìXIMOS PASOS PARA PRODUCCI√ìN");
    console.log("==================================");
    console.log("1. üîó Conectar a Chainlink Price Feeds reales");
    console.log("2. üìä Integrar con Chainlink Automation");
    console.log("3. üéØ Ajustar par√°metros seg√∫n mercado");
    console.log("4. üõ°Ô∏è Auditor√≠a de seguridad completa");
    console.log("5. üåê Deploy en Avalanche Mainnet");
}

main()
    .then(() => {
        console.log("\nüéâ DEMO COMPLETADO!");
        process.exit(0);
    })
    .catch((error) => {
        console.error("‚ùå Error en demo:", error);
        process.exit(1);
    });
